(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["d99106a2"],{2514:function(e,n,t){"use strict";var o=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[t("section",{staticClass:"page-header"},[t("h1",{staticClass:"project-name"},[e._v("QIconPicker")]),t("h2",{staticClass:"project-tagline"}),t("q-btn",{staticClass:"btn",attrs:{type:"a",href:"https://github.com/quasarframework/app-extension-qiconpicker",target:"_blank",label:"View on GitHub","no-caps":"",flat:""}}),t("q-btn",{staticClass:"btn",attrs:{to:"/docs",label:"Docs","no-caps":"",flat:""}}),t("q-btn",{staticClass:"btn",attrs:{to:"/examples",label:"Examples","no-caps":"",flat:""}}),t("q-btn",{staticClass:"btn",attrs:{to:"/demo",label:"Interactive Demo","no-caps":"",flat:""}})],1),t("main",{staticClass:"flex flex-start justify-center inset-shadow"},[t("div",{staticClass:"q-pa-md col-12-sm col-8-md col-6-lg inset-shadow",staticStyle:{width:"100%",height:"3px"}}),t("div",{staticClass:"q-pa-md col-12-sm col-8-md col-6-lg bg-white shadow-1",staticStyle:{"max-width":"800px",width:"100%"}},[e._t("default")],2)])])},a=[],s={name:"Hero"},r=s,i=t("2877"),c=Object(i["a"])(r,o,a,!1,null,null,null);n["a"]=c.exports},"8b24":function(e,n,t){"use strict";t.r(n);var o=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("hero",[t("q-markdown",{attrs:{src:e.markdown,toc:""},on:{data:e.onToc}})],1)},a=[],s=t("2514"),r='QIconPicker\n===\n\n> Please note, this is currently a work-in-progress (WIP).\n\nQIconPicker is a [Quasar App Extension](https://quasar.dev/app-extensions/introduction). It allows you to select an icon from a specified [Quasar Icon Set](https://quasar.dev/options/quasar-icon-sets) or pass in an array of objects defining the icons to be displayed.\n\n# Install\nTo add this App Extension to your Quasar application, run the following (in your Quasar app folder):\n```\nquasar ext add @quasar/qiconpicker\n```\n::: tip\nIn order to work properly, QIconPicker needs a specified height in it\'s style (or parent style).\n:::\n\n# Uninstall\nTo remove this App Extension from your Quasar application, run the following (in your Quasar app folder):\n```\nquasar ext remove @quasar/qiconpicker\n```\n\n# Describe\nYou can use `quasar describe QIconPicker` (to be implemented before QIconPicker v1 release)\n\n# Docs\nCan be found [here](https://quasarframework.github.io/app-extension-qiconpicker).\n\n# Examples\nCan be found [here](https://quasarframework.github.io/app-extension-qiconpicker/examples).\n\n# Interactive Demo\nCan be found [here](https://quasarframework.github.io/app-extension-qiconpicker/demo).\n\n# Demo (source) Project\nCan be found [here](https://github.com/quasarframework/app-extension-qiconpicker/tree/master/demo).\n\n# Working with QIconPicker\n\nQIconPicker will work with any of the defined [Quasar Icon Sets](https://quasar.dev/options/quasar-icon-sets). However, for this to work properly, you must make sure the icon set is included in your `quasar.conf.js > extras`.\n\n::: warning\nMost icon sets are very large which may cause performance issues.\n:::\n\n# QIconPicker API\n\n## Vue Properties\n\n| Vue Property | Type | Description |\n| --- | --- | --- |\n| value | String | `v-model` data |\n| icon-set | String | Acceptable strings are: `material-icons`, `ionicons-v4`, `mdi-v3`, `fontawesome-v5`, `eva-icons`, and `themify` |\n| icons | Array | Dat should look like this: `[ { name="extension" }, ... ]` |\n| filter | String | Icons will be filtered by the passed string |\n| dense | Boolean | Dense mode |\n| tooltips | Boolan | Show tooltips |\n| no-footer | Boolan | Set to `true` to hide footer when `pagination` is enabled |\n| color | String | This can be any CSS color value or Quasar color |\n| background-color | String | This can be any CSS color value or Quasar color |\n| selected-color | String | This can be any CSS color value or Quasar color |\n| selected-background-color | String | This can be any CSS color value or Quasar color |\n| font-size | String | The font-size to use for the icons. Any acceptable CSS size can be used.<br>Examples: 1.85rem, 30px |\n| pagination | Object | For pagination purposes. Use `paginatin.sync` to synchronize the data.<br>`:pagination.sync="pagination"`<br>Where the object looks like this: `{ page: #, itemsPerPage: #, totalPage: # }`. You can use `page` and `itemsPerPage` to control the pagination. QIconPicker will set `totalPage` depending on `icon-set` or `icons` properties.<br>If using a `filter` the page will automatically be reset to 1 |\n\nAll colors can be from the [Quasar Color Pallete](https://quasar.dev/style/color-palette) or a CSS color (#, rgb, rgba, hls, etc).\n\n\n## Vue Events\n| Vue Event | Args | Description |\n| --- | --- | --- |\n| input | - | v-model syncronization |\n\n## Vue Slots\n| Vue Method | Data | Description |\n| --- | --- | --- |\n| icon | String (icon name) | Change the way the icon data is displayed |\n\n---\nThis page created with [QMarkdown](https://quasarframework.github.io/app-extension-qmarkdown), another great Quasar App Extension.',i={name:"PageIndex",components:{Hero:s["a"]},data:function(){return{markdown:r}},computed:{toc:{get:function(){return this.$store.state.common.toc},set:function(e){console.log("toc:",e),this.$store.commit("common/toc",e)}}},methods:{onToc:function(e){this.toc=e}}},c=i,l=t("2877"),p=Object(l["a"])(c,o,a,!1,null,null,null);n["default"]=p.exports}}]);